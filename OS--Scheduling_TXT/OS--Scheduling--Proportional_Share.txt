### Proportional Share

- Instead of trying to optimize turnaround and response time, try to give each job a percentage of available CPU time

Tickets
- A single ticket represents a share of CPU resources; it serves as an abstract unit of sorts

- A lottery scheduler will attempt to dispense a proportional share probabalistically, rather than deterministically
- To achieve this the scheduler has to remember how many tickets exist in the first place
- 
- Every so often, the scheduler will hold a lottery, and will pick a winning ticket. The job that holds the corresponding ticket
  will run. Jobs that should run more are given more tickets.
  
- Ticket transfer: a job can temporarilly hand off its own tickets for another job/process to use

- In an environment where jobs can trust eachother, it might even be possible for a job to temporarilly raise the
  the number of its own tickets. This is refered to as ticket inflation.
  
- Lottery scheduling is, in the end, actually very simple. All you need is a random number generator, and a data structure to track tickets + processes

How to assign tickets?
The user is given a certain number of tickets, which they manually allocate.
  
  Stride Scheduling
  
 - Every job is given a “stride” which is inversely proportional to the number of tickets it has. Every time a process runs, a pass value
   is incremented to track its global progress. The stride + pass value is what determines what job runs next.  
  




